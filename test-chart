#!/bin/bash
# Tests a chart by rendering it using values in "test" directory (if any) and
# comparing them against expected output.
# You can use the --update flag to update expected files instead of running tests.
set -euo pipefail

if [[ ! -d test ]]; then
  echo "No chart tests found"
  exit 0
fi

if [[ $# > 0 && $1 == '--update' ]]; then
  echo "Updating expected files instead of running tests"
  UPDATE=1
  shift
fi

if [[ $# > 0 && $1 == '--debug' ]]; then
  DEBUG=1
  DEBUG_FLAG="--debug"
  echo "Running in debug mode"
  shift
fi

# Tests can be specified explicitly via args (or will default to all if omitted).
# They can even be specified as relative directory names, which allows to leverage
# shell auto-completion.
if [[ $# > 0 ]]; then
  tests=$@
else
  tests=$(cd test; ls -d */)
fi

RESULT="SUCCESS"
helm dependency update
for test in $tests; do
  # Remove path prefix and suffix (if any)
  test=${test/test\//}
  test=${test%/}

  echo "========================================"
  echo " TEST: $test"
  echo "----------------------------------------"

  EXPECTED="test/$test/expected.yaml"
  VALUES="test/$test/values.yaml"
  ACTUAL="test/$test/actual.yaml"

  # Render template
  (helm template ${DEBUG_FLAG:-} release123 . -f $VALUES \
    2> >(grep -v "coalesce.go:160: warning:" >&2) \
    > $ACTUAL) && true
  if [[ $? != 0 ]]; then
    exit 1
  fi
  
  # Validate rendered yaml
  VALIDATION="validation.txt"
  kubeval --strict --ignore-missing-schemas --quiet $ACTUAL > $VALIDATION && true
  if [[ $? != 0 ]]; then
    RESULT="FAILED"
    echo " SCHEMA VALIDATION FAILED:"
    cat $VALIDATION
    echo "----------------------------------------"
  fi
  rm $VALIDATION
  
  # Ignore checksums
  sed -i'' "/ checksum\//d" $EXPECTED $ACTUAL

  # Compare results
  (diff -c $EXPECTED $ACTUAL) && true
  CASE_RESULT=$?

  # Output summary
  if [[ $CASE_RESULT != 0 ]]; then
    if [[ ${UPDATE:-} == 1 ]]; then
      # Update expected file
      cat $ACTUAL > $EXPECTED
      echo " UPDATED EXPECTED.YAML"
    else
      RESULT="FAILED"
      echo "----------------------------------------"
      echo " FAIL"
    fi
  else
    if [[ ${UPDATE:-} == 1 ]]; then
      echo " UNCHANGED"
    else
      echo " PASS"
    fi
  fi

  if [[ ${DEBUG:-} != 1 ]]; then
    rm $ACTUAL
  fi
done
echo "========================================"
echo $RESULT

[[ $RESULT == "FAILED" ]] && exit 1 || exit 0
